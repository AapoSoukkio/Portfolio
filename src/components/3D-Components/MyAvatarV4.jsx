/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.7 public/MyAvatarV4.glb
*/

import React, { useEffect, useRef, useState  } from 'react'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import * as THREE from 'three' 

export default function MyAvatarV4(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF('/MyAvatarV4.glb')

  const { animations: standingUpAnimation } = useFBX("animations/StandingUp.fbx");
  const { animations: WalkCircleAnimation } = useFBX("animations/WalkCircle.fbx");

  standingUpAnimation[0].name = "StandingUp";
  WalkCircleAnimation[0].name = "Walking";

  const { actions } = useAnimations([...standingUpAnimation, ...WalkCircleAnimation], group);
  const [hasPlayedStandingUp, setHasPlayedStandingUp] = useState(false);

  useEffect(() => {
    actions["StandingUp"].reset().setEffectiveTimeScale(1).play().fadeIn(0.5);
  }, []);

  useEffect(() => {
    const standingUpClip = actions["StandingUp"].getClip();
    standingUpClip.loop = THREE.LoopOnce; // Set the "StandingUp" animation to play once

    const standingUpAction = actions["StandingUp"];
    standingUpAction.clampWhenFinished = true;

    // Listen for the completion of the "StandingUp" animation
    standingUpAction.setLoop(THREE.LoopOnce, 1);
    standingUpAction.enabled = true;
    standingUpAction.reset();
    standingUpAction.play().fadeIn(0.5);

    standingUpAction.getMixer().addEventListener('finished', () => {
      setHasPlayedStandingUp(true); // Set the flag to indicate that the "StandingUp" animation has been played
    });
  }, []);

  useEffect(() => {
    if (hasPlayedStandingUp) {
      // Transition to the "Walking" animation
      actions["StandingUp"].fadeOut(0.5);
      actions["Walking"].reset().setEffectiveTimeScale(1).play().fadeIn(0.5);
    }
  }, [hasPlayedStandingUp]);

  return (
    <group {...props} ref={group}  scale={2} position={[-1.6, -0.0, -4.0]} rotation={[-1.2, 0, -0.1]} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
  )
}

useGLTF.preload('/MyAvatarV4.glb')
